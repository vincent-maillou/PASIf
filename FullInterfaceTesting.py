from PASIf import *

import numpy as np


# Generate the excitation set
excitationSet = []
excitation = np.ones(78001)
excitationSet.append(excitation)
sampleRate = 16000


pasif = PASIf(excitationSet, sampleRate)

# pasif.setExcitations(excitationSet, sampleRate)

""" M = [[1.0, 0.0, 0.0],
     [0.0, 10,  0.0],
     [0.0, 0.0, 100.0]]

B = [[2.0, 0.0, 0.0],
     [0.0, 2.0, 0.0],
     [0.0, 0.0, 2.0]]

K = [[6.0, 0.0, 0.0],
     [0.0, 6.0, 0.0],
     [0.0, 0.0, 6.0]]

Gamma = [[[1.0, 1.0, 0.0],
          [0.0, 1.0, 0.0],
          [0.0, 0.0, 0.0]], [[2.0, 2.0, 0.0],
                             [0.0, 2.0, 0.0],
                             [0.0, 0.0, 0.0]], [[3.0, 3.0, 0.0],
                                                [0.0, 3.0, 0.0],
                                                [0.0, 0.0, 0.0]]]

Lambda = [[[[1.0, 1.0, 0.0],
          [0.0, 1.0, 0.0],
          [0.0, 0.0, 0.0]], [[2.0, 2.0, 0.0],
                             [0.0, 2.0, 0.0],
                             [0.0, 0.0, 0.0]], [[3.0, 3.0, 0.0],
                                                [0.0, 3.0, 0.0],
                                                [0.0, 0.0, 0.0]]], 
        [[[1.0, 1.0, 0.0],
          [0.0, 1.0, 0.0],
          [0.0, 0.0, 0.0]], [[2.0, 2.0, 0.0],
                             [0.0, 2.0, 0.0],
                             [0.0, 0.0, 0.0]], [[3.0, 3.0, 0.0],
                                                [0.0, 3.0, 0.0],
                                                [0.0, 0.0, 0.0]]],
        [[[1.0, 1.0, 0.0],
          [0.0, 1.0, 0.0],
          [0.0, 0.0, 0.0]], [[2.0, 2.0, 0.0],
                             [0.0, 2.0, 0.0],
                             [0.0, 0.0, 0.0]], [[3.0, 3.0, 0.0],
                                                [0.0, 3.0, 0.0],
                                                [0.0, 0.0, 0.0]]]]

ForcePattern = [1.0, 0.0, 0.0]

InitialCondition = [0.0, 0.0, 0.0] """




M = [[1.0, 0.0, 0.0],
      [0.0, 10, 0.0],
      [0.0, 0.0, 1.0]]

B = [[2.0, 0.0, 0.0],
      [0.0, 10.0, 0.0],
      [0.0, 0.0, 0.0]]

K = [[12.0, 0.0, 0.0],
      [0.0, 10.0, 0.0],
      [0.0, 0.0, 0.0]]

Gamma = [[[0.0, 20.0, 0.0],
           [0.0, 0.0, 0.0],
           [0.0, 0.0, 0.0]], [[10, 0.0, 0.0],
                              [0.0, 0.0, 0.0],
                              [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0],
                                                 [0.0, 1, 0.0],
                                                 [0.0, 0.0, 0.0]]]

Lambda = [[[[0.0, 0.0, 0.0],
           [0.0, 0.0, 0.0],
           [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0],
                              [0.0, 0.0, 0.0],
                              [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0],
                                                 [0.0, 0.0, 0.0],
                                                 [0.0, 0.0, 0.0]]],
           [[[0.0, 0.0, 0.0],
           [0.0, 0.0, 0.0],
           [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0],
                              [0.0, 40000.0, 0.0],
                              [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0],
                                                 [0.0, 0.0, 0.0],
                                                 [0.0, 0.0, 0.0]]],
           [[[0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0],
                                [0.0, 0.0, 0.0],
                                [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0],
                                                   [0.0, 0.0, 0.0],
                                                   [0.0, 0.0, 0.0]]]]

ForcePattern = [1.0, 0.0, 0.0]

InitialCondition = [0.0, 0.0, 0.0]

n=1
vecM = np.array(n*[M])
vecB = np.array(n*[B])
vecK = np.array(n*[K])
vecGamma = np.array(n*[Gamma])
vecLambda = np.array(n*[Lambda])
vecForcePattern = np.array(n*[ForcePattern])
vecInitialCondition = np.array(n*[InitialCondition])

pasif.setSystems(vecM, vecB, vecK, vecGamma, vecLambda, vecForcePattern, vecInitialCondition)

results = pasif.getAmplitudes()

print(results)

""" print(Gamma)

Gamma = np.reshape(Gamma, (27))

print(Gamma) """